user nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    # include       /etc/nginx/proxy.conf;
    proxy_redirect     off;
    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Host $server_name;
    proxy_set_header   X-Forwarded-Proto $scheme;

    client_max_body_size 100M;
    proxy_connect_timeout 600;
    proxy_send_timeout 600;
    proxy_read_timeout 600;
    send_timeout 600;

    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" "$request_uri" "$uri"'
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;
    sendfile on;
    keepalive_timeout 65;


    upstream api-other-get {
      server api_other_get:3000;
    }

    upstream api-other-post {
      server api_other_post:3000;
    }

    upstream api-auth { 
      # [GET] users (다른 것 다운되도 로그인은 가능하도록)
      # IMAP
      server api_auth:3000;
    }

    upstream api-socket {
      # [POST] task, job (태스크 자동할당 소켓 관련)
      server api_socket:3000;
    }

    upstream api-jobs-get { # [GET] job, tasks (조회로 인해서 다운됐을것 같은 도메인)
      server api_jobs_get:3000;
      server api_jobs_get_2:3000;
    }

    server {
        listen 80 http2;
        listen [::]:80 http2;
        server_name makevalue.net www.makevalue.net;
        # server_name dev.makevalue.net www.dev.makevalue.net;

        location ~ /.well-known/acme-challenge {
            allow all;
            root /usr/share/nginx/html;
        }

        location / {
            allow all;
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name makevalue.net www.makevalue.net;
        # server_name dev.makevalue.net www.dev.makevalue.net;

        ssl_certificate /etc/letsencrypt/live/makevalue.net/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/makevalue.net/privkey.pem;
        # ssl_certificate /etc/letsencrypt/live/dev.makevalue.net/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/dev.makevalue.net/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        location /prod/ {
            rewrite ^/prod(.*)$ $1 break;
            proxy_pass          http://api-other-get;
        }

        location /auth {
            proxy_pass          http://api-auth;
        }

        location /socket.pub {
            proxy_pass          http://api-socket;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /assigned-tasks {
            if ($request_method = GET) {
                proxy_pass  http://api-jobs-get;
            }

            if ($request_method = POST) {
                proxy_pass  http://api-socket;
            }
            
            if ($request_method = PATCH) {
                proxy_pass http://api-socket;
            }

            if ($request_method = DELETE) {
                proxy_pass http://api-socket;
            }
        }

        location /jobs {
            if ($request_method = GET) {
                proxy_pass  http://api-jobs-get;
            }

            if ($request_method = POST) {
                proxy_pass  http://api-socket;
            }
            
            if ($request_method = PATCH) {
                proxy_pass http://api-socket;
            }

            if ($request_method = DELETE) {
                proxy_pass http://api-socket;
            }
        }

        location /users {
            proxy_pass  http://api-auth;
        }

        location / {
            if ($request_method = GET) {
                proxy_pass  http://api-other-get;
            }

            if ($request_method = POST) {
                proxy_pass  http://api-other-post;
            }
            
            if ($request_method = PATCH) {
                proxy_pass http://api-other-post;
            }

            if ($request_method = DELETE) {
                proxy_pass http://api-other-post;
            }
        }
    }
}