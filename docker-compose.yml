version: '3'
services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.nginx
    command: bash -c "nginx -s reload"
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./certbot-etc:/etc/letsencrypt
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./logs:/var/log/nginx

  api_socket:
    image: ${API_DOCKER_IMAGE_PATH}
    tty: true
    restart: always
    command: bash -c "pnpm run start:prod"
    env_file:
      - ./baruncorp-api/.env
    environment:
      - IMAP_ON_OFF=false
    healthcheck:
      test: wget --spider http://localhost:3000/jobs || kill 1 # 혹은 로컬 말고 nginx path
      interval: 30s
      timeout: 1s
      retries: 1
      # start_period: 30s # 실패를 무시할 뿐, test 커맨드는 container health와 상관 없이 응답이 없으면 무조건 컨테이너를 kill 한다.

  api_auth:
    image: ${API_DOCKER_IMAGE_PATH}
    tty: true
    restart: always
    command: bash -c "pnpm run start:prod"
    env_file:
      - ./baruncorp-api/.env
    environment:
      - IMAP_ON_OFF=true
    healthcheck:
      test: wget --spider http://localhost:3000/jobs || kill 1 # 혹은 로컬 말고 nginx path
      interval: 30s
      timeout: 1s
      retries: 1
      # start_period: 30s # 실패를 무시할 뿐, test 커맨드는 container health와 상관 없이 응답이 없으면 무조건 컨테이너를 kill 한다.

  api_jobs_get:
    image: ${API_DOCKER_IMAGE_PATH}
    tty: true
    restart: always
    command: bash -c "pnpm run start:prod"
    env_file:
      - ./baruncorp-api/.env
    environment:
      - IMAP_ON_OFF=false
    healthcheck:
      test: wget --spider http://localhost:3000/jobs || kill 1 # 혹은 로컬 말고 nginx path
      interval: 30s
      timeout: 1s
      retries: 1
      # start_period: 30s # 실패를 무시할 뿐, test 커맨드는 container health와 상관 없이 응답이 없으면 무조건 컨테이너를 kill 한다.

  api_jobs_get_2:
    image: ${API_DOCKER_IMAGE_PATH}
    tty: true
    restart: always
    command: bash -c "pnpm run start:prod"
    env_file:
      - ./baruncorp-api/.env
    environment:
      - IMAP_ON_OFF=false
    healthcheck:
      test: wget --spider http://localhost:3000/jobs || kill 1 # 혹은 로컬 말고 nginx path
      interval: 30s
      timeout: 1s
      retries: 1
      # start_period: 30s # 실패를 무시할 뿐, test 커맨드는 container health와 상관 없이 응답이 없으면 무조건 컨테이너를 kill 한다.

  api_other_get:
    image: ${API_DOCKER_IMAGE_PATH}
    tty: true
    restart: always
    ports:
      - '3000:3000'
    command: bash -c "pnpm run start:prod"
    env_file:
      - ./baruncorp-api/.env
    environment:
      - IMAP_ON_OFF=false
    healthcheck:
      test: wget --spider http://localhost:3000/jobs || kill 1 # 혹은 로컬 말고 nginx path
      interval: 30s
      timeout: 1s
      retries: 1
      # start_period: 30s # 실패를 무시할 뿐, test 커맨드는 container health와 상관 없이 응답이 없으면 무조건 컨테이너를 kill 한다.

  api_other_post:
    image: ${API_DOCKER_IMAGE_PATH}
    tty: true
    restart: always
    command: bash -c "pnpm run start:prod"
    env_file:
      - ./baruncorp-api/.env
    environment:
      - IMAP_ON_OFF=false
    healthcheck:
      test: wget --spider http://localhost:3000/jobs || kill 1 # 혹은 로컬 말고 nginx path
      interval: 30s
      timeout: 1s
      retries: 1
      # start_period: 30s # 실패를 무시할 뿐, test 커맨드는 container health와 상관 없이 응답이 없으면 무조건 컨테이너를 kill 한다.

  certbot:
    depends_on:
      - nginx
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot-etc:/etc/letsencrypt
      - ./myweb:/usr/share/nginx/html
    command: certonly --webroot --webroot-path=/usr/share/nginx/html --email gyals0386@gmail.com --agree-tos --no-eff-email --keep-until-expiring -d ${API_HOST} -d ${API_WWW_HOST}
# 도메인 설정, 80포트 443포트 33906포트 열어 놓을 것
