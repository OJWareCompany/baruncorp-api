generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model OrganizationTypes {
  type               String          @id
  organizationEntity Organizations[]

  @@map("organization_types")
}

model Organizations {
  id                     String             @id @default(uuid())
  name                   String             @unique
  description            String?
  email                  String?
  organizationType       String             @map("organization_type")
  city                   String?
  country                String?
  phoneNumber            String?            @map("phone_number")
  postalCode             String?            @map("postal_code")
  stateOrRegion          String?            @map("state_or_region")
  street1                String?
  street2                String?
  invitationEmailEntity  InvitationEmails[]
  organizationTypeEntity OrganizationTypes  @relation(fields: [organizationType], references: [type])
  users                  Users[]

  @@index([organizationType], map: "organizations_organization_type_fkey")
  @@map("organizations")
}

model Roles {
  role                  String             @id
  invitationEmailEntity InvitationEmails[]
  UserRole              UserRole[]

  @@map("roles")
}

model InvitationEmails {
  code               String        @id
  email              String
  role               String
  organizationId     String        @map("organization_id")
  organizationEntity Organizations @relation(fields: [organizationId], references: [id])
  rolesEntity        Roles         @relation(fields: [role], references: [role])

  @@index([organizationId], map: "invitation_emails_organization_id_fkey")
  @@index([role], map: "invitation_emails_role_fkey")
  @@map("invitation_emails")
}

model UserRole {
  role        String
  userId      String @map("user_id")
  rolesEntity Roles  @relation(fields: [role], references: [role])
  userEntity  Users  @relation(fields: [userId], references: [id])

  @@id([userId, role])
  @@index([role], map: "user_role_role_fkey")
  @@map("user_role")
}

model Users {
  id                     String                   @id @default(uuid())
  email                  String                   @unique
  firstName              String                   @map("first_name")
  lastName               String                   @map("last_name")
  organizationId         String                   @map("organization_id")
  passwordEntity         Passwords?
  userRoleEntity         UserRole[]
  organizationEntity     Organizations            @relation(fields: [organizationId], references: [id])
  UserService            UserService[]
  UserStructuralLicenses UserStructuralLicenses[]
  UserElectricalLicenses UserElectricalLicenses[]

  @@index([organizationId], map: "users_organization_id_fkey")
  @@map("users")
}

model Passwords {
  userId   String @unique @map("user_id")
  user     Users  @relation(fields: [userId], references: [id])
  password String

  @@map("passwords")
}

model Departments {
  id          String      @id @default(uuid())
  name        String
  description String
  Positions   Positions[]

  @@map("departments")
}

model Positions {
  id               String            @id @default(uuid())
  name             String
  description      String
  departmentId     String            @map("department_id")
  departmentEntity Departments       @relation(fields: [departmentId], references: [id])
  PositionService  PositionService[]

  @@map("positions")
}

model Services {
  id              String            @id @default(uuid())
  name            String
  description     String
  PositionService PositionService[]
  UserService     UserService[]

  @@map("services")
}

model PositionService {
  positionId     String    @map("position_id")
  positionEntity Positions @relation(fields: [positionId], references: [id])
  serviceId      String    @map("service_id")
  serviceEntity  Services  @relation(fields: [serviceId], references: [id])

  @@id([positionId, serviceId])
  @@map("position_service")
}

model UserService {
  userId        String   @map("user_id")
  userEntity    Users    @relation(fields: [userId], references: [id])
  serviceId     String   @map("service_id")
  serviceEntity Services @relation(fields: [serviceId], references: [id])

  @@id([userId, serviceId])
  @@map("user_service")
}

model States {
  name                   String
  abbreviation           String
  UserStructuralLicenses UserStructuralLicenses[]
  UserElectricalLicenses UserElectricalLicenses[]

  @@id([name, abbreviation])
  @@map("states")
}

model UserStructuralLicenses {
  userId             String @map("user_id")
  userEntity         Users  @relation(fields: [userId], references: [id])
  issuingCountryName String @map("issuing_country_name")
  abbreviation       String
  stateEntity        States @relation(fields: [issuingCountryName, abbreviation], references: [name, abbreviation])

  @@id([userId, issuingCountryName])
  @@map("user_structural_licenses")
}

model UserElectricalLicenses {
  userId             String @map("user_id")
  userEntity         Users  @relation(fields: [userId], references: [id])
  issuingCountryName String @map("issuing_country_name")
  abbreviation       String
  stateEntity        States @relation(fields: [issuingCountryName, abbreviation], references: [name, abbreviation])

  @@id([userId, issuingCountryName])
  @@map("user_electrical_licenses")
}
