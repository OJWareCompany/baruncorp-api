generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model OrganizationTypes {
  type               String          @id
  updatedAt          DateTime?       @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt          DateTime?       @default(now()) @map("created_at") @db.DateTime(0)
  organizationEntity Organizations[]

  @@map("organization_types")
}

model Organizations {
  id                     String             @id @default(uuid())
  name                   String             @unique
  description            String?
  organizationType       String             @map("organization_type")
  city                   String?
  country                String?
  street1                String?
  street2                String?
  email                  String?
  phoneNumber            String?            @map("phone_number")
  postalCode             String?            @map("postal_code")
  stateOrRegion          String?            @map("state_or_region")
  updatedAt              DateTime?          @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt              DateTime?          @default(now()) @map("created_at") @db.DateTime(0)
  invitationEmailEntity  InvitationEmails[]
  organizationTypeEntity OrganizationTypes  @relation(fields: [organizationType], references: [type])
  users                  Users[]

  @@index([organizationType], map: "organizations_organization_type_fkey")
  @@map("organizations")
}

model Roles {
  role                  String             @id
  updatedAt             DateTime?          @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt             DateTime?          @default(now()) @map("created_at") @db.DateTime(0)
  invitationEmailEntity InvitationEmails[]
  UserRole              UserRole[]

  @@map("roles")
}

model InvitationEmails {
  code               String        @id
  email              String
  role               String
  organizationId     String        @map("organization_id")
  updatedAt          DateTime?     @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt          DateTime?     @default(now()) @map("created_at") @db.DateTime(0)
  organizationEntity Organizations @relation(fields: [organizationId], references: [id])
  rolesEntity        Roles         @relation(fields: [role], references: [role])

  @@index([organizationId], map: "invitation_emails_organization_id_fkey")
  @@index([role], map: "invitation_emails_role_fkey")
  @@map("invitation_emails")
}

model UserRole {
  role        String
  userId      String    @map("user_id")
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt   DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  rolesEntity Roles     @relation(fields: [role], references: [role])
  userEntity  Users     @relation(fields: [userId], references: [id])

  @@id([userId, role])
  @@index([role], map: "user_role_role_fkey")
  @@map("user_role")
}

model Users {
  id                     String                   @id @default(uuid())
  email                  String                   @unique
  firstName              String                   @map("first_name")
  lastName               String                   @map("last_name")
  organizationId         String                   @map("organization_id")
  updatedAt              DateTime?                @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt              DateTime?                @default(now()) @map("created_at") @db.DateTime(0)
  passwordEntity         Passwords?
  UserElectricalLicenses UserElectricalLicenses[]
  UserPosition           UserPosition[]
  userRoleEntity         UserRole[]
  UserService            UserService[]
  UserStructuralLicenses UserStructuralLicenses[]
  organizationEntity     Organizations            @relation(fields: [organizationId], references: [id])

  @@index([organizationId], map: "users_organization_id_fkey")
  @@map("users")
}

model Passwords {
  userId    String    @unique @map("user_id")
  password  String
  updatedAt DateTime? @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  user      Users     @relation(fields: [userId], references: [id])

  @@map("passwords")
}

model Departments {
  id          String      @id @default(uuid())
  name        String
  description String
  updatedAt   DateTime?   @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt   DateTime?   @default(now()) @map("created_at") @db.DateTime(0)
  Positions   Positions[]

  @@map("departments")
}

model Positions {
  id               String            @id @default(uuid())
  name             String
  description      String
  departmentId     String            @map("department_id")
  updatedAt        DateTime?         @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt        DateTime?         @default(now()) @map("created_at") @db.DateTime(0)
  PositionService  PositionService[]
  departmentEntity Departments       @relation(fields: [departmentId], references: [id])
  UserPosition     UserPosition[]

  @@index([departmentId], map: "positions_department_id_fkey")
  @@map("positions")
}

model Services {
  id              String            @id @default(uuid())
  name            String
  description     String
  updatedAt       DateTime?         @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt       DateTime?         @default(now()) @map("created_at") @db.DateTime(0)
  PositionService PositionService[]
  UserService     UserService[]

  @@map("services")
}

model PositionService {
  positionId     String    @map("position_id")
  serviceId      String    @map("service_id")
  updatedAt      DateTime? @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt      DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  positionEntity Positions @relation(fields: [positionId], references: [id])
  serviceEntity  Services  @relation(fields: [serviceId], references: [id])

  @@id([positionId, serviceId])
  @@index([serviceId], map: "position_service_service_id_fkey")
  @@map("position_service")
}

model UserService {
  userId        String    @map("user_id")
  serviceId     String    @map("service_id")
  updatedAt     DateTime? @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt     DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  serviceEntity Services  @relation(fields: [serviceId], references: [id])
  userEntity    Users     @relation(fields: [userId], references: [id])

  @@id([userId, serviceId])
  @@index([serviceId], map: "user_service_service_id_fkey")
  @@map("user_service")
}

model States {
  stateName              String                   @map("state_name")
  abbreviation           String                   @map("abbreviation")
  geoId                  String                   @map("geo_id") @db.VarChar(20)
  stateCode              String?                  @map("state_code") @db.VarChar(20)
  ansiCode               String?                  @map("ansi_code") @db.VarChar(20)
  stateLongName          String?                  @map("state_long_name")
  lsadCode               String?                  @map("lsad_code") @db.VarChar(20)
  funcStat               String?                  @map("func_stat") @db.VarChar(20)
  updatedAt              DateTime?                @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt              DateTime?                @default(now()) @map("created_at") @db.DateTime(0)
  UserElectricalLicenses UserElectricalLicenses[]
  UserStructuralLicenses UserStructuralLicenses[]

  @@id([stateName, abbreviation])
  @@map("states")
}

model UserStructuralLicenses {
  userId             String    @map("user_id")
  issuingCountryName String    @map("issuing_country_name")
  abbreviation       String
  priority           Int?
  expiryDate         DateTime? @map("expiry_date")
  issuedDate         DateTime? @map("issue_date")
  updatedAt          DateTime? @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt          DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  stateEntity        States    @relation(fields: [issuingCountryName, abbreviation], references: [stateName, abbreviation])
  userEntity         Users     @relation(fields: [userId], references: [id])

  @@id([userId, issuingCountryName])
  @@index([issuingCountryName, abbreviation], map: "user_structural_licenses_issuing_country_name_abbreviation_fkey")
  @@map("user_structural_licenses")
}

model UserElectricalLicenses {
  userId             String    @map("user_id")
  issuingCountryName String    @map("issuing_country_name")
  abbreviation       String
  expiryDate         DateTime? @map("expiry_date")
  issuedDate         DateTime? @map("issue_date")
  priority           Int?
  updatedAt          DateTime? @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt          DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  stateEntity        States    @relation(fields: [issuingCountryName, abbreviation], references: [stateName, abbreviation])
  userEntity         Users     @relation(fields: [userId], references: [id])

  @@id([userId, issuingCountryName])
  @@index([issuingCountryName, abbreviation], map: "user_electrical_licenses_issuing_country_name_abbreviation_fkey")
  @@map("user_electrical_licenses")
}

model UserPosition {
  userId         String    @map("user_id")
  positionId     String    @map("position_id")
  updatedAt      DateTime? @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt      DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  positionEntity Positions @relation(fields: [positionId], references: [id])
  userEntity     Users     @relation(fields: [userId], references: [id])

  @@id([userId, positionId])
  @@index([positionId], map: "user_position_position_id_fkey")
  @@map("user_position")
}

model CountySubdivisions {
  geoId      String    @id @map("geo_id") @db.VarChar(20)
  stateCode  String?   @map("state_code") @db.VarChar(20)
  stateName  String?   @map("state_name") @db.VarChar(200)
  countyCode String?   @map("county_code") @db.VarChar(20)
  name       String?   @map("name") @db.VarChar(200)
  ansiCode   String?   @map("ansi_code") @db.VarChar(20)
  lsadCode   String?   @map("lsad_code") @db.VarChar(20)
  funcStat   String?   @map("func_stat") @db.VarChar(20)
  longName   String?   @map("long_name") @db.VarChar(200)
  updatedAt  DateTime? @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt  DateTime? @default(now()) @map("created_at") @db.DateTime(0)

  @@map("county_subdivisions")
}

model Counties {
  geoId          String    @id @map("geo_id") @db.VarChar(20)
  stateCode      String?   @map("state_code") @db.VarChar(20)
  stateName      String?   @map("state_name") @db.VarChar(100)
  countyCode     String?   @map("county_code") @db.VarChar(20)
  ansiCode       String?   @map("ansi_code") @db.VarChar(20)
  countyName     String?   @map("county_name") @db.VarChar(100)
  countyLongName String?   @map("county_long_name") @db.VarChar(100)
  lsadCode       String?   @map("lsad_code") @db.VarChar(20)
  funcStat       String?   @map("func_stat") @db.VarChar(20)
  updatedAt      DateTime? @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt      DateTime? @default(now()) @map("created_at") @db.DateTime(0)

  @@map("counties")
}

model Places {
  geoId           String    @id @map("geo_id") @db.VarChar(20)
  stateCode       String?   @map("state_code") @db.VarChar(20)
  stateName       String?   @map("state_name") @db.VarChar(100)
  placeC          String?   @map("place_c") @db.VarChar(20)
  placeNsAnsiCode String?   @map("place_ns_ansi_code") @db.VarChar(20)
  placeFips       String?   @map("place_fips") @db.VarChar(20)
  placeName       String?   @map("place_name") @db.VarChar(100)
  placeType       String?   @map("place_type") @db.VarChar(20)
  lsadCode        String?   @map("lsad_code") @db.VarChar(20)
  counties        String?   @map("counties") @db.VarChar(100)
  funcStat        String?   @map("func_stat") @db.VarChar(20)
  placeLongName   String?   @map("place_long_name") @db.VarChar(200)
  updatedAt       DateTime? @updatedAt @map("updated_at") @db.DateTime(0)
  createdAt       DateTime? @default(now()) @map("created_at") @db.DateTime(0)

  @@map("places")
}

model AHJNotes {
  geoId                         String    @id @map("geo_id") @db.VarChar(20)
  geoIdState                    String    @map("geo_id_state") @db.VarChar(20)
  geoIdCounty                   String?   @map("geo_id_county") @db.VarChar(20)
  geoIdCountySubdivision        String?   @map("geo_id_county_subdivision") @db.VarChar(20)
  geoIdPlace                    String?   @map("geo_id_place") @db.VarChar(20)
  name                          String    @map("name") @db.VarChar(300)
  fullAhjName                   String    @map("full_ahj_name") @db.VarChar(300)
  queryState                    String?   @map("query_state") @db.VarChar(20)
  queryCounty                   String?   @map("query_county") @db.VarChar(200)
  website                       String?   @map("website") @db.VarChar(242)
  specificFormRequired          String?   @map("specific_form_required") @db.VarChar(200)
  buildingCodes                 String?   @map("building_codes") @db.Text
  generalNotes                  String?   @map("general_notes") @db.Text
  pvMeterRequired               String?   @map("pv_meter_required") @db.VarChar(200)
  acDisconnectRequired          String?   @map("ac_disconnect_required") @db.VarChar(200)
  centerFed120Percent           String?   @map("center_fed_120_percent") @db.VarChar(200)
  deratedAmpacity               String?   @map("derated_ampacity") @db.VarChar(200)
  createdAt                     DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  fireSetBack                   String?   @map("fire_set_back") @db.Text
  utilityNotes                  String?   @map("utility_notes") @db.Text
  designNotes                   String?   @map("design_notes") @db.Text
  iebcAccepted                  String?   @map("iebc_accepted") @db.VarChar(300)
  structuralObservationRequired String?   @map("structural_observation_required") @db.VarChar(20)
  digitalSignatureType          String?   @map("digital_signature_type") @db.VarChar(300)
  windUpliftCalculationRequired String?   @map("wind_uplift_calculation_required") @db.VarChar(300)
  windSpeed                     String?   @map("wind_speed") @db.VarChar(300)
  modifiedBy                    String?   @map("modified_by") @db.VarChar(300)
  windExposure                  String?   @map("wind_exposure") @db.VarChar(300)
  snowLoadGround                String?   @map("snow_load_ground") @db.VarChar(300)
  snowLoadFlatRoof              String?   @map("snow_load_flat_roof") @db.VarChar(300)
  snowLoadSlopedRoof            String?   @map("snow_load_sloped_roof") @db.VarChar(300)
  wetStampsRequired             String?   @map("wet_stamps_required") @db.VarChar(300)
  ofWetStamps                   String?   @map("of_wet_stamps") @db.VarChar(300)
  wetStampSize                  String?   @map("wet_stamp_size") @db.VarChar(300)
  engineeringNotes              String?   @map("engineering_notes") @db.Text
  electricalNotes               String?   @map("electrical_notes") @db.Text
  modifiedAt                    DateTime? @map("modified_at") @db.DateTime(0)
  funcStat                      String?   @map("func_stat") @db.VarChar(300)
  address                       String?   @map("address") @db.VarChar(300)
  lsad                          String?   @map("lsad") @db.VarChar(20)
  usps                          String?   @map("usps") @db.VarChar(20)
  ansiCode                      String?   @map("ansi_code") @db.VarChar(20)
  type                          String?   @db.VarChar(20)
  updatedAt                     DateTime? @updatedAt @map("updated_at") @db.DateTime(0)

  @@map("ahj_notes")
}
