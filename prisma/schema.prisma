generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model OrganizationTypes {
  type               String          @id
  organizationEntity Organizations[]

  @@map("organization_types")
}

model Organizations {
  id                     String             @id @default(uuid())
  name                   String             @unique
  description            String?
  email                  String?
  organizationType       String             @map("organization_type")
  city                   String?
  country                String?
  phoneNumber            String?            @map("phone_number")
  postalCode             String?            @map("postal_code")
  stateOrRegion          String?            @map("state_or_region")
  street1                String?
  street2                String?
  invitationEmailEntity  InvitationEmails[]
  organizationTypeEntity OrganizationTypes  @relation(fields: [organizationType], references: [type])
  users                  Users[]

  @@index([organizationType], map: "organizations_organization_type_fkey")
  @@map("organizations")
}

model Roles {
  role                  String             @id
  invitationEmailEntity InvitationEmails[]
  UserRole              UserRole[]

  @@map("roles")
}

model InvitationEmails {
  code               String        @id
  email              String
  role               String
  organizationId     String        @map("organization_id")
  organizationEntity Organizations @relation(fields: [organizationId], references: [id])
  rolesEntity        Roles         @relation(fields: [role], references: [role])

  @@index([organizationId], map: "invitation_emails_organization_id_fkey")
  @@index([role], map: "invitation_emails_role_fkey")
  @@map("invitation_emails")
}

model UserRole {
  role        String
  userId      String @map("user_id")
  rolesEntity Roles  @relation(fields: [role], references: [role])
  userEntity  Users  @relation(fields: [userId], references: [id])

  @@id([userId, role])
  @@index([role], map: "user_role_role_fkey")
  @@map("user_role")
}

model Users {
  id                 String        @id @default(uuid())
  email              String        @unique
  firstName          String        @map("first_name")
  lastName           String        @map("last_name")
  organizationId     String        @map("organization_id")
  passwordEntity     Passwords?
  userRoleEntity     UserRole[]
  organizationEntity Organizations @relation(fields: [organizationId], references: [id])

  @@index([organizationId], map: "users_organization_id_fkey")
  @@map("users")
}

model Passwords {
  userId   String @unique @map("user_id")
  password String
  user     Users  @relation(fields: [userId], references: [id])

  @@map("passwords")
}
